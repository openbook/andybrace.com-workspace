{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/index.js","webpack:///./src/components/Grid/index.js","webpack:///./src/components/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["React","createContext","PropTypes","object","string","isRequired","func","__webpack_require__","d","__webpack_exports__","pages_query","require","_ref","data","react_default","a","createElement","components","console","log","site","siteMetadata","title","className","allMarkdownRemark","totalCount","edges","map","_ref2","node","key","id","gatsby_link_default","to","fields","slug","frontmatter","date","excerpt","query","Grid","props","children","components_Grid","m","module","exports","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","propTypes","shape"],"mappings":"sKAY2BA,IAAMC,cAAc,IA0CvCC,IAAUC,OACTD,IAAUE,OAAOC,WAChBH,IAAUI,KACRJ,IAAUI,KCzDtBC,EAAAC,EAAAC,EAAA,0BAAAC,IAGAC,EAAQ,KAEOF,EAAA,iBAAAG,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGC,QAAQC,IAAIN,GACbC,EAAAC,EAAAC,cAAA,mBAAWH,EAAKO,KAAKC,aAAaC,OAClCR,EAAAC,EAAAC,cAAA,KAAGO,UAAW,QAAd,oBACAT,EAAAC,EAAAC,cAAA,UAAKH,EAAKW,kBAAkBC,WAA5B,UACCZ,EAAKW,kBAAkBE,MAAMC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAChCf,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,EAAKE,IACbjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACEkB,GAAIJ,EAAKK,OAAOC,MAChBrB,EAAAC,EAAAC,cAAA,UACGa,EAAKO,YAAYd,MAAO,IACzBR,EAAAC,EAAAC,cAAA,iBACSa,EAAKO,YAAYC,QAI9BvB,EAAAC,EAAAC,cAAA,SAAIa,EAAKS,cAjBF,IAuBFC,EAAK,mEClBHC,EARF,SAAAC,GACX,OACE3B,EAAAC,EAAAC,cAAA,OAAKO,UAAWkB,EAAMlB,WAAa,MAChCkB,EAAMC,WCLbnC,EAAAC,EAAAC,EAAA,sBAAAkC,yBCAA,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWjC,EAAQ,OALRiC,EAAEG,SAAYH,oGCMzCI,EAAmB,SAAApC,GAAkB,IAAfqC,EAAerC,EAAfqC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAOrD,IAAMgB,cAAcsC,IAApBC,OAAAC,OAAA,CACLP,WACAC,iBACGA,EAAcO,QAIrBT,EAAiBU,UAAY,CAC3BT,SAAU/C,IAAUyD,MAAM,CACxBN,SAAUnD,IAAUE,OAAOC,aAC1BA,YAGU2C","file":"component---src-pages-index-js-ef2ecd19e1a6b3b21548.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\";\nimport { Grid } from '../components'\nimport { Link, graphql } from \"gatsby\"\nrequire('../styles/global.scss')\n\nexport default ({data}) => (\n  <Grid>\n    {console.log(data)}\n    <h1>About {data.site.siteMetadata.title}</h1>\n    <p className={'test'}>Hello Gatsby 123</p>\n    <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n    {data.allMarkdownRemark.edges.map(({ node }) => (\n      <div key={node.id}>\n        <Link\n          to={node.fields.slug}>\n          <h3>\n            {node.frontmatter.title}{\" \"}\n            <span>\n                  â€” {node.frontmatter.date}\n                </span>\n          </h3>\n        </Link>\n        <p>{node.excerpt}</p>\n      </div>\n    ))}\n  </Grid>\n)\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    },\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`","import React from 'react'\n\nconst Grid = props => {\n  return (\n    <div className={props.className || null}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Grid\n","/* @flow */\n\nimport Grid from './Grid';\n\nexport {\n  Grid,\n};\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}